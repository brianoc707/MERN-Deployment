{"version":3,"sources":["components/PetForm.js","components/PetTable.js","components/PetInfo.js","components/EditPet.js","views/Main.js","App.js","serviceWorker.js","index.js"],"names":["props","useState","name","setName","type","setType","desc","setDesc","skillone","setSkillone","skilltwo","setSkilltwo","skillthree","setSkillthree","errors","setErrors","className","onSubmit","e","preventDefault","axios","post","then","res","console","log","data","navigate","catch","err","onChange","target","value","message","onClick","pets","setPets","useEffect","get","to","border","map","pet","i","key","_id","setPet","removeFromDom","likes","showPet","response","delete","id","put","document","getElementById","setAttribute","setMessage","PetForm","path","PetTable","PetInfo","filter","EditPet","App","Main","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62010aa6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport axios from 'axios';\nimport { navigate } from '@reach/router';\n\n\n\n\nexport default props => {\n    const [name, setName] = useState(\"\");\n    const [type, setType] = useState(\"\");\n    const [desc, setDesc] = useState(\"\");\n    const [skillone, setSkillone] = useState(\"\");\n    const [skilltwo, setSkilltwo] = useState(\"\");\n    const [skillthree, setSkillthree] = useState(\"\");\n    const [errors, setErrors] = useState({});\n\n\n\n    const onSubmitHandler = e => {\n        e.preventDefault();\n        axios.post('http://localhost:8000/api/pets', {\n            name,\n            type,\n            desc,\n            skillone,\n            skilltwo,\n            skillthree\n            \n        })\n            .then(res => {\n                console.log(res);\n                if(res.data.errors) {\n                    setErrors(res.data.errors);\n                }\n                else{\n                    navigate(\"/\")\n                }\n              \n            })\n            .catch(err => console.log(err));\n    }\n\n    const onClickHandler = e => {\n        e.preventDefault();\n        navigate('/')\n    }\n\nreturn (\n     \n        <div className=\"container\">\n            <h1>Pet Shelter</h1>\n            <h3>Know of a pet needing a home?</h3>\n                <form onSubmit={onSubmitHandler}>\n                    <div className=\"form-group\">\n                        <label>Name</label>\n                        <input type=\"text\"\n                        className =\"form-control\"\n                        onChange={e => setName(e.target.value)}\n                        />\n                        <span className=\"text-danger\">{errors.name ? errors.name.message: \"\" }</span>\n                    \n                    </div>\n                    <div className=\"form-group\">\n                        <label>Type</label>\n                        <input type=\"text\"\n                        className =\"form-control\"\n                        onChange={e => setType(e.target.value)}\n                        />\n                        <span className=\"text-danger\">{errors.type ? errors.type.message: \"\" }</span>\n                    \n                    </div>\n                    \n                    <div className=\"form-group\">\n                        <label>Description</label>\n                        <input type=\"text\"\n                        className = \"form-control\"\n                        onChange={e => setDesc(e.target.value)}\n                        />\n                        <span className=\"text-danger\">{errors.desc ? errors.desc.message: \"\" }</span>\n                    \n                    </div>\n                    <div className=\"form-group\">\n                        <label>Skill one</label>\n                        <input type=\"text\"\n                        className = \"form-control\"\n                        onChange={e => setSkillone(e.target.value)}\n                        />\n                        \n                    \n                    </div>\n                    <div className=\"form-group\">\n                        <label>Skill two</label>\n                        <input type=\"text\"\n                        className = \"form-control\"\n                        onChange={e => setSkilltwo(e.target.value)}\n                        />\n                       \n                    </div>\n                    <div className=\"form-group\">\n                        <label>Skill three</label>\n                        <input type=\"text\"\n                        className = \"form-control\"\n                        onChange={e => setSkillthree(e.target.value)}\n                        />\n                       \n                    \n                    </div>\n                <input className=\"btn btn-outline-success\" type=\"submit\"/> \n            </form>\n            <br />\n            <button onClick={onClickHandler} className=\"btn btn-outline-danger\">Cancel</button>          \n        </div>\n    )\n}","\nimport React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport { Link } from '@reach/router';\n\n\n\n\n\n\n\n\nexport default props => {\nconst [pets, setPets] = useState([]);\n\n    useEffect(() => {\n        axios.get('http://localhost:8000/api/pets')\n            .then(res => {\n                setPets(res.data);\n               \n            })\n            .catch(err=>console.log(err));\n    }, []);\n\n\nreturn (\n     \n        <div className=\"container\">\n            <Link to=\"/new\">Create a Pet</Link>\n            <h1>Pet Shelter</h1>\n            <h3>These pets are looking for a home!</h3>\n            <table border=\"1px solid black\" className=\"table table-dark\">\n            <tbody>\n                <tr>\n                    <th>Name</th>\n                    <th>Type</th>\n                    <th>Description</th>\n                    <th>Skills</th>\n                    <th>Action</th>\n                </tr>\n                {\n                    pets.map ((pet, i) =>\n                        <tr key={i}>\n                            <td>\n                            <Link to={\"/info/\" + pet._id}>{pet.name}</Link>\n                            </td>\n                            <td>{pet.type}</td>\n                            <td>{pet.desc}</td>\n                            <td>{pet.skillone}<br />{pet.skilltwo}<br />{pet.skillthree}</td>\n                            <td>\n                            <Link to={\"/edit/\" + pet._id}>Edit</Link>\n                            </td>\n                            \n                        </tr>\n                    )\n                }\n            </tbody>\n            </table>\n            \n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link, navigate } from '@reach/router';\n\n\n\n\nexport default props => {\n    const [pet, setPet] = useState(\"\");\n    const { removeFromDom } = props;\n    const [likes, setLikes] = useState(0)\n \n\n    const showPet = () => {\n        axios.get(\"http://localhost:8000/api/pets/\" + props._id)\n        .then(response => {\n            setPet(response.data)\n            console.log(response)\n        })\n        .catch(err => console.log(\"Error:\", err))\n    }\n\n\n    useEffect( () => {\n        showPet();\n\n    }, [props._id])\n\n    const deletePet = _id => {\n        axios.delete('http://localhost:8000/api/pets/' + _id)\n            .then(res => {\n                removeFromDom(_id)\n                navigate('/');\n            })\n            .catch(err => console.log(err));\n        \n    }\n    const like = _id => {\n\n        axios.put(\"http://localhost:8000/api/like/\" + _id, {\n            likes\n        })\n            .then(res => {\n                console.log(res)\n                showPet();\n            })\n            .catch(err => console.log(err))\n            document.getElementById('button').setAttribute(\"disabled\", \"disabled\");\n    }\n\n  \n\n    \n    return (\n        <>\n            <div className=\"container\">\n            <Link to=\"/\">Home</Link>\n            <h1>Details about {pet.name}</h1>\n            <h2>Type:{pet.type}</h2>\n            <h3>Description: {pet.desc}</h3>\n            <h4>Skills:</h4>\n                <p>{pet.skillone}</p>\n                <p>{pet.skilltwo}</p>\n                <p>{pet.skillthree}</p>\n                <button className =\"btn btn-outline-success\" onClick={e => {deletePet(pet._id)}}>Adopt</button>\n                <p>\n                <button\n                 className =\"btn btn-outline-primary\"\n                 id=\"button\"\n                \n                 onClick={e => {like(pet._id)}}\n                 \n                 >Like this pet</button>\n                 <span>Likes: {pet.likes}</span>\n                </p>\n            </div>  \n            \n        </>\n    );\n\n}\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { navigate } from '@reach/router';\n\nexport default props => {\n    const [name, setName] = useState(\"\");\n    const [type, setType] = useState(\"\");\n    const [desc, setDesc] = useState(\"\");\n    const [skillone, setSkillone] = useState(\"\");\n    const [skilltwo, setSkilltwo] = useState(\"\");\n    const [skillthree, setSkillthree] = useState(\"\");\n    const [errors, setErrors] = useState({});\n\n    useEffect(() => {\n        axios.get(`http://localhost:8000/api/pets/${props._id}`)\n            .then(res => {\n                setName(res.data.name);\n                setType(res.data.type);\n                setDesc(res.data.desc);\n                setSkillone(res.data.skillone);\n                setSkilltwo(res.data.skilltwo);\n                setSkillthree(res.data.skillthree);\n                \n                console.log(res.data)})\n            .catch(err => console.log(err));\n        console.log(\"when does this run?\", props._id);\n    }, [props._id])\n\n    const onSubmitHandler = e => {\n        e.preventDefault();\n        axios.put(`http://localhost:8000/api/pets/${props._id}`, {\n            name,\n            type,\n            desc,\n            skillone,\n            skilltwo,\n            skillthree\n        })\n            .then(res => {\n                console.log(res);\n                if(res.data.errors) {\n                    setErrors(res.data.errors);\n                }\n                else{\n                    navigate(\"/info/\" + props._id)\n                }\n              \n            })\n            .catch(err => console.log(err));\n    }\n    const onClickHandler = e => {\n        e.preventDefault();\n        navigate('/info/' + props._id)\n    }\n\nreturn (\n     \n        <div className=\"container\">\n            <h1>Edit</h1>\n            <form onSubmit={onSubmitHandler}>\n                    <div className=\"form-group\">\n                        <label>Name</label>\n                        <input type=\"text\"\n                        className =\"form-control\"\n                        onChange={e => setName(e.target.value)}\n                        value = {name}\n                        />\n                        <span className=\"text-danger\">{errors.name ? errors.name.message: \"\" }</span>\n                    \n                    </div>\n                    <div className=\"form-group\">\n                        <label>Type</label>\n                        <input type=\"text\"\n                        className =\"form-control\"\n                        onChange={e => setType(e.target.value)}\n                        value = {type}\n                        />\n                        <span className=\"text-danger\">{errors.type ? errors.type.message: \"\" }</span>\n                    \n                    </div>\n                    \n                    <div className=\"form-group\">\n                        <label>Description</label>\n                        <input type=\"text\"\n                        className = \"form-control\"\n                        onChange={e => setDesc(e.target.value)}\n                        value = {desc}\n                        />\n                        <span className=\"text-danger\">{errors.desc ? errors.desc.message: \"\" }</span>\n                    \n                    </div>\n                    <div className=\"form-group\">\n                        <label>Skill one</label>\n                        <input type=\"text\"\n                        className = \"form-control\"\n                        onChange={e => setSkillone(e.target.value)}\n                        value = {skillone}\n                        />\n                        \n                    \n                    </div>\n                    <div className=\"form-group\">\n                        <label>Skill two</label>\n                        <input type=\"text\"\n                        className = \"form-control\"\n                        onChange={e => setSkilltwo(e.target.value)}\n                        value = {skilltwo}\n                        />\n                       \n                    \n                    </div>\n                    <div className=\"form-group\">\n                        <label>Skill three</label>\n                        <input type=\"text\"\n                        className = \"form-control\"\n                        onChange={e => setSkillthree(e.target.value)}\n                        value = {skillthree}\n                        />\n                       \n                    \n                    </div>\n                <input className=\"btn btn-outline-success\" type=\"submit\" value=\"Edit Pet\"/>\n            </form>\n            <button onClick={onClickHandler} className=\"btn btn-outline-danger\">Cancel</button>\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport PetForm from '../components/PetForm'\nimport {  Router, Link } from '@reach/router';\nimport PetTable from '../components/PetTable';\nimport PetInfo from '../components/PetInfo';\nimport EditPet from '../components/EditPet';\n\n\n\nexport default () => {\n    const [ message, setMessage ] = useState(\"...Loading\");\n    const [pets, setPets] = useState([]);\n    \n    const removeFromDom = _id => {\n        setPets(pets.filter(pet => pet._id !== _id))\n    }\n   \n\n    useEffect(() => {\n        axios.get('http://localhost:8000/api')\n        .then(response => {\n            setMessage(response.data.message)\n        })\n    }, [])\n\n    return (\n        <>\n        <div className=\"container\">\n        \n        </div>\n        <Router>\n            \n            <PetForm path=\"/new\" />\n            <PetTable path=\"/\" />\n            <PetInfo path=\"/info/:_id\" removeFromDom={removeFromDom} />\n            <EditPet path=\"/edit/:_id\" />\n            \n        </Router>\n        </>\n    )\n}","import React from 'react';\n\nimport Main from './views/Main' ;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}